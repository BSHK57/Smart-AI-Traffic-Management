from flask import Flask, request, jsonify, send_file
from flask_cors import CORS
import numpy as np
import cv2
from ultralytics import YOLO
import firebase_admin
from firebase_admin import credentials, auth, messaging
import tempfile
import os

app = Flask(__name__)
CORS(app, resources={r"/*": {"origins": "*"}})  # Enable CORS for all routes

# Initialize Firebase
cred = credentials.Certificate("smarttrafficroadsafety-8bdb2-firebase-adminsdk-fbsvc-6c9bdfc767.json")
firebase_admin.initialize_app(cred)

# Load YOLOv8 model
model = YOLO("yolov8n.pt")

@app.route("/", methods=["GET"])
def home():
    return jsonify({"message": "Flask Backend is Running!"})

@app.route("/monitor-traffic", methods=["POST"])
def monitor_traffic():
    file = request.files.get("video")
    if not file:
        return jsonify({"error": "No video provided"}), 400

    temp_video_path = "temp_uploaded_video.mp4"
    file.save(temp_video_path)

    cap = cv2.VideoCapture(temp_video_path)

    total_vehicle_count = 0
    frame_count = 0

    while cap.isOpened():
        ret, frame = cap.read()
        if not ret:
            break

        image_resized = cv2.resize(frame, (800, 450))
        results = model(image_resized)[0]

        for r in results:
            if hasattr(r, "boxes") and r.boxes is not None:
                for box in r.boxes.data:
                    class_id = int(box[-1])
                    if class_id in [2, 3, 5, 7]:
                        total_vehicle_count += 1

        frame_count += 1

    cap.release()
    avg_vehicle_count = total_vehicle_count / frame_count if frame_count else 0

    congestion_level = "High Traffic" if avg_vehicle_count > 10 else "Moderate Traffic" if avg_vehicle_count > 5 else "Low Traffic"

    return jsonify({"level": congestion_level, "average_vehicle_count": avg_vehicle_count}), 200

@app.route("/detect-accident", methods=["POST"])
def detect_accident():
    file = request.files.get("video")
    if not file:
        return jsonify({"error": "No video provided"}), 400

    temp_video_path = tempfile.NamedTemporaryFile(delete=False, suffix=".mp4").name
    file.save(temp_video_path)

    cap = cv2.VideoCapture(temp_video_path)
    accident_detected = False
    frame_count = 0

    model_path = "best.pt"
    accident_model = YOLO(model_path)

    # Prepare output video
    fourcc = cv2.VideoWriter_fourcc(*'mp4v')
    output_video_path = tempfile.NamedTemporaryFile(delete=False, suffix=".mp4").name
    fps = int(cap.get(cv2.CAP_PROP_FPS))
    width = int(cap.get(cv2.CAP_PROP_FRAME_WIDTH))
    height = int(cap.get(cv2.CAP_PROP_FRAME_HEIGHT))
    out = cv2.VideoWriter(output_video_path, fourcc, fps, (width, height))

    while cap.isOpened():
        ret, frame = cap.read()
        if not ret:
            break
        
        frame_count += 1
        results = accident_model(frame, conf=0.4)
        
        for r in results:
            if hasattr(r, "boxes") and r.boxes is not None:
                for box in r.boxes.data:
                    class_id = int(box[-1])
                    if class_id == 0:
                        accident_detected = True
                        break

        # Draw detections and save
        annotated_frame = results[0].plot()
        out.write(annotated_frame)

        if frame_count % 10 == 0:
            print(f"Processing Frame: {frame_count} - Accident Detected: {accident_detected}")
        
        if accident_detected:
            break

    cap.release()
    out.release()
    os.remove(temp_video_path)

    if accident_detected:
        send_alert("Accident detected! Immediate response needed.")
        return jsonify({"message": "Accident detected and alert sent", "video_url": output_video_path, "total_frames": frame_count}), 200
    else:
        return jsonify({"message": "No accident detected", "video_url": output_video_path, "total_frames": frame_count}), 200

@app.route("/get-video", methods=["GET"])
def get_video():
    video_path = request.args.get("path")
    if not video_path or not os.path.exists(video_path):
        return jsonify({"error": "Video not found"}), 404
    return send_file(video_path, mimetype='video/mp4')

@app.route("/send-alert", methods=["POST"])
def send_alert(message):
    notification = messaging.Message(
        notification=messaging.Notification(
            title="Traffic Alert",
            body=message
        ),
        topic="traffic-alerts"
    )
    messaging.send(notification)
    return jsonify({"message": "Notification sent"}), 200

if __name__ == "__main__":
    app.run(debug=True)
